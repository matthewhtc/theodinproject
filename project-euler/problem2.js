//problem 2
/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 
NOTE: I did not go up to four million. just went up to a small enough number to ensure that the code actually worked.*/

/***********************************/

//declare variables
var firstNum = 1;
var secondNum = 2; 
var thirdNum;
var FibonacciNumbers = [1,2];
var sum = 0;

//for loop to actually make the fibonacci sequence
for (var i = 0; i >= 0; i++) {
	//find the next number in the sequence
	thirdNum = firstNum + secondNum;

	//replace the first and second numbers
	firstNum = secondNum;
	secondNum = thirdNum;

	//check to see when the number is reached a large # (picked arbitrarily) 
	if(thirdNum > 1000) {
		break;
	}

	//store in the array
	FibonacciNumbers.push(thirdNum);
}
/* just a check to see if my fibonacci sequence is actually correct 
console.log(FibonacciNumbers); */

//loop to find the sum of the even-valued terms
for (var j = 0; j < FibonacciNumbers.length; j++) {
	if (FibonacciNumbers[j]%2 === 0) {
		sum += FibonacciNumbers[j];
	}
}

//print sum
console.log(sum); 